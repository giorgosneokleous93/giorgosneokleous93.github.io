<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Giorgos Neokleous</title>
    <link>https://www.giorgosneokleous.com/post/</link>
    <description>Giorgos Neokleous (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Apr 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://www.giorgosneokleous.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Let‚Äôs talk (Tts)Spans in Android Accessibility </title>
      <link>https://www.giorgosneokleous.com/post/lets-talk-ttsspans-in-android-accessibility/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.giorgosneokleous.com/post/lets-talk-ttsspans-in-android-accessibility/</guid>
      <description>&lt;p&gt;A great talk from the Google IO 2019 called ‚Äú&lt;a href=&#34;https://www.youtube.com/watch?v=bTodlNvQGfY&#34;&gt;Demystifying Android Accessibility Development&lt;/a&gt;‚Äù mentions that when designing apps, we often miss to account for the users with accessibility needs. Users with accessibility needs won‚Äôt interact with the app directly, but instead they will use tools such as the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback&amp;amp;hl=en_GB&#34;&gt;Android Accessibility Suite&lt;/a&gt; (includes Talkback and Switch Access). The user will interact with the Accessibility service and then the service will interact with the app.&lt;/p&gt;
&lt;p&gt;Accessibility services need information on what the screen has or shows to be able to provide the correct contextual information to the user or to be able to navigate through the app. An example of that information can be provided using &lt;a href=&#34;https://developer.android.com/guide/topics/ui/accessibility/apps#describe-ui-element&#34;&gt;Content Descriptions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this blog post we‚Äôll talk about &lt;a href=&#34;https://developer.android.com/guide/topics/text/spans&#34;&gt;Spans&lt;/a&gt; in Android and how to enrich &lt;a href=&#34;https://developer.android.com/reference/android/text/Spannable&#34;&gt;Spannables&lt;/a&gt; to provide a better UX to users with accessibility needs.&lt;/p&gt;
&lt;p&gt;From the official &lt;a href=&#34;https://developer.android.com/guide/topics/text/spans&#34;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spans are powerful markup objects that you can use to style text at a character or paragraph level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With Spans we can change the text color of a substring or have a link-clickable part within a string, or even different size substrings. Sky is the limit üöÄ&lt;/p&gt;
&lt;p&gt;In this post, we‚Äôll specifically talk about &lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en&#34;&gt;TtsSpan&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;ttsspan&#34;&gt;TtsSpan&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;TtsSpan&lt;/em&gt; can provide metadata for a Spannable. The metadata will be supplied to &lt;a href=&#34;https://developer.android.com/reference/android/speech/tts/TextToSpeech&#34;&gt;Text-To-Speech&lt;/a&gt; Engines such as &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback&amp;amp;hl=en_GB&#34;&gt;Talkback&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This span comes with several builders and each builder helps &lt;em&gt;building&lt;/em&gt; metadata for a different type. The types supported by the builders are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_CARDINAL&#34;&gt;TYPE_CARDINAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_DATE&#34;&gt;TYPE_DATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_DECIMAL&#34;&gt;TYPE_DECIMAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_DIGITS&#34;&gt;TYPE_DIGITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_ELECTRONIC&#34;&gt;TYPE_ELECTRONIC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_FRACTION&#34;&gt;TYPE_FRACTION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_MEASURE&#34;&gt;TYPE_MEASURE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_MONEY&#34;&gt;TYPE_MONEY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_ORDINAL&#34;&gt;TYPE_ORDINAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_TELEPHONE&#34;&gt;TYPE_TELEPHONE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_TEXT&#34;&gt;TYPE_TEXT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_TIME&#34;&gt;TYPE_TIME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan?hl=en#TYPE_VERBATIM&#34;&gt;TYPE_VERBATIM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To demonstrate their benefits, we‚Äôll explore the following types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TtsSpan.TYPE_DATE&lt;/li&gt;
&lt;li&gt;TtsSpan.TYPE_MEASURE&lt;/li&gt;
&lt;li&gt;TtsSpan.TYPE_TIME&lt;/li&gt;
&lt;li&gt;TtsSpan.TYPE_ELECTRONIC&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;brief-introduction-to-demo&#34;&gt;Brief introduction to demo&lt;/h3&gt;
&lt;p&gt;The demo application has a list of items. Each item is duplicated, one without TtsSpan and one with TtsSpan to highlight the differences.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/lets-talk-spans-texttospeechexample-1.png&#34; alt=&#34;Demo App Screenshot&#34;&gt;&lt;/p&gt;
&lt;p&gt;When an item is clicked, we pass the Spannable (with or without TtsSpan) to the TextToSpeech service to output the metadata.&lt;/p&gt;
&lt;h3 id=&#34;verification&#34;&gt;Verification&lt;/h3&gt;
&lt;p&gt;To verify that the metadata are supplied to the TextToSpeech engines correctly, we could do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Supply the spannables to the TextToSpeech.speak method which will output the data&lt;/li&gt;
&lt;li&gt;Turn on Talkback and navigate the demo using the service.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The demo videos use the first point + &lt;a href=&#34;https://support.google.com/accessibility/android/answer/9350862?hl=en-GB&#34;&gt;Live Caption&lt;/a&gt; to verify and present you the output.&lt;/p&gt;
&lt;h3 id=&#34;building-the-list&#34;&gt;Building the list&lt;/h3&gt;
&lt;p&gt;The list is built using RecyclerView with &lt;code&gt;TtsItem&lt;/code&gt; classes. Each item has a title, a caption and a nullable type of TtsSpan (if null then no TtsSpan is built).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TtsItem&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; title: String,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; caption: String,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; ttsSpanType: String?
) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; id: Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toSpannable&lt;/span&gt;(): SpannableString? { ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/lets-talk-spans-ttsitem.png&#34; alt=&#34;TtsItem demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;To produce the different TtsItem, we have a data factory called DummyDataFactory .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DummyDataFactory&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getListOfTtsItem&lt;/span&gt;(): List&amp;lt;TtsItem&amp;gt; = listOf(
        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;18/04/2020&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date without TTSSpan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;18/04/2020&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date with TtsSpan.DateBuilder&amp;#34;&lt;/span&gt;, TtsSpan.TYPE_DATE),

        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 meter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Measure without TTSSpan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 meter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Measure with TTSSpan&amp;#34;&lt;/span&gt;, TtsSpan.TYPE_MEASURE),

        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;14:00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time without TTSSpan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;14:00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time with TTSSpan&amp;#34;&lt;/span&gt;, TtsSpan.TYPE_TIME),

        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin:123456789&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password without TTSSpan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
        TtsItem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin:123456789&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password with TTSSpan&amp;#34;&lt;/span&gt;, TtsSpan.TYPE_ELECTRONIC)
    ).also { list -&amp;gt;
        list.forEachIndexed { index, ttsItem -&amp;gt; ttsItem.id = index }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;explore-tospannable-from-ttsitem&#34;&gt;Explore toSpannable() from TtsItem&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Please note that some of the code shown below is for demonstration purposes only and mapping strings to TtsSpan most likely won‚Äôt work like that in real life projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Have a look at the &lt;strong&gt;captions&lt;/strong&gt; to see the difference with and without TtsSpan.&lt;/p&gt;
&lt;h3 id=&#34;ttsspantype_date&#34;&gt;TtsSpan.TYPE_DATE&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; calendar = Calendar.getInstance()
calendar.time = simpleDataFormat.parse(title)
   &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not expected null Date&amp;#34;&lt;/span&gt;)
TtsSpan.DateBuilder()
   .setWeekday(calendar.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(Calendar.DAY_OF_WEEK))
   .setDay(calendar.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(Calendar.DAY_OF_MONTH))
   .setMonth(calendar.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(Calendar.MONTH))
   .setYear(calendar.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(Calendar.YEAR))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code block will take a String date, parse it into a Date object which is then supplied to a Calendar. Then the Calendar object is used to extract different information that would be useful to &lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder?hl=en&#34;&gt;TtsSpan.DateBuilder()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;video controls src=&#34;https://www.giorgosneokleous.com/posts/lets-talk-spans-date-demo.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Caption without TtsSpan:&lt;/strong&gt; ‚Äú18 slash 04 slash 2020‚Äú&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caption with TtsSpan:&lt;/strong&gt; ‚ÄúSunday the 18th of April 2020‚Äú&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ttsspantype_measure&#34;&gt;TtsSpan.TYPE_MEASURE&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; number = digitsPattern.find(title)&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;value &lt;span style=&#34;color:#75715e&#34;&gt;// extracts digits
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; unit = stringPattern.find(title)&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;value &lt;span style=&#34;color:#75715e&#34;&gt;// extracts string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;TtsSpan.MeasureBuilder()
   .setNumber(number)
   .setUnit(unit)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code block will extract the digits from the string which will be treated as the number and then extract the text from the string which will be treated as the Measurement unit. All the extracted data are supplied to the &lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder?hl=en&#34;&gt;TtsSpan.MeasureBuilder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;video controls src=&#34;https://www.giorgosneokleous.com/posts/lets-talk-spans-measure-demo.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Caption without TtsSpan:&lt;/strong&gt; ‚Äú5 metre‚Äú&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caption with TtsSpan:&lt;/strong&gt; ‚Äú5 metres‚Äú&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see the metadata helps identify whether the measurement is singular or plural.&lt;/p&gt;
&lt;h3 id=&#34;ttsspantype_time&#34;&gt;TtsSpan.TYPE_TIME&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; hours = title.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; minutes = title.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
TtsSpan.TimeBuilder()
   .setHours(hours.toInt())
   .setMinutes(minutes.toInt())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code block builds metadata needed for time. It simply extracts hours and minutes from string and supplies them to the &lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder?hl=en&#34;&gt;TtsSpan.TimeBuilder()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;video controls src=&#34;https://www.giorgosneokleous.com/posts/lets-talk-spans-time-demo.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Caption without TtsSpan:&lt;/strong&gt; ‚Äú14 colon zero zero‚Äú&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caption with TtsSpan:&lt;/strong&gt; ‚Äú14 hundred‚Äú&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ttsspantype_electronic&#34;&gt;TtsSpan.TYPE_ELECTRONIC&lt;/h3&gt;
&lt;p&gt;This particular type can be used to build several ‚Äúelectronic‚Äù metadata. In our example we‚Äôll build metadata for a username and password.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; username = title.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; password = title.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
TtsSpan.ElectronicBuilder()
   .setPassword(password)
   .setUsername(username)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code block uses the &lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder?hl=en&#34;&gt;TtsSpan.ElectronicBuilder&lt;/a&gt; to build the metadata. The first part of the string is treated as the username and the second part as the password.&lt;/p&gt;
&lt;p&gt;&lt;video controls src=&#34;https://www.giorgosneokleous.com/posts/lets-talk-spans-electronic-demo.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Caption without TtsSpan:&lt;/strong&gt; ‚Äúadmin 123 million 456 thousands 7 hundred and 89‚Äú&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caption with TtsSpan:&lt;/strong&gt; ‚Äúadmin passoword 1 2 3 4 5 6 7 8 9‚Äú
The above example is my favourite as it demonstrates how powerful the Text-to-Speech engine can be with the correct metadata.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Providing rich UX is important, and we need to make sure that our apps are accessible for all users. We have seen some examples on how to add some metadata in apps so that Text to Speech services provide contextual information.&lt;/p&gt;
&lt;p&gt;‚û° All the above examples can be found at the &lt;a href=&#34;https://github.com/giorgosneokleous93/text-to-speech-span-example&#34;&gt;sample project on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to ping me on &lt;a href=&#34;https://twitter.com/neokleoys2005&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till next time! üëã&lt;/p&gt;
&lt;h4 id=&#34;recommended-reading--listening&#34;&gt;Recommended Reading &amp;amp; Listening&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/accessibility/testing&#34;&gt;Test your app‚Äôs accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/text/style/TtsSpan&#34;&gt;TtsSpan documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/accessibility&#34;&gt;Get started with Android Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://androidbackstage.blogspot.com/2020/04/episode-137-accessibility.html&#34;&gt;Episode 137 on Android Developer Backstage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/basic-android-accessibility/&#34;&gt;Codelab ‚Äì Basic Android Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;amp;hl=en_GB&#34;&gt;Accessibility Scanner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Full-Screen Intent Notifications ‚Äì Android</title>
      <link>https://www.giorgosneokleous.com/post/full-screen-intent-notifications-android/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.giorgosneokleous.com/post/full-screen-intent-notifications-android/</guid>
      <description>&lt;h3 id=&#34;what-are-full-screen-intents&#34;&gt;What are Full-Screen Intents?&lt;/h3&gt;
&lt;p&gt;Full-Screen &lt;a href=&#34;https://developer.android.com/reference/android/content/Intent&#34;&gt;Intents&lt;/a&gt; are Intents that can launch in full-screen and can be used for showing a full-screen notification.&lt;/p&gt;
&lt;p&gt;Well, I guess that needs a bit more explanation so keep on reading.&lt;/p&gt;
&lt;p&gt;From the official &lt;a href=&#34;https://developer.android.com/training/notify-user/build-notification#urgent-message&#34;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your app might need to display an urgent, time-sensitive message, such as an incoming phone call or a ringing alarm. In these situations, you can associate a full-screen intent with your notification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;why-should-full-screen-intents-be-used&#34;&gt;Why should Full-Screen Intents be used?&lt;/h3&gt;
&lt;p&gt;A restriction was added with Android Q where an app couldn‚Äôt start an activity if &lt;a href=&#34;https://developer.android.com/guide/components/activities/background-starts#exceptions&#34;&gt;not meeting criteria&lt;/a&gt;. Although this breaks a lot of things, it doesn‚Äôt affect full-screen intents. (see &lt;a href=&#34;https://developer.android.com/guide/components/activities/background-starts#display-notification&#34;&gt;Restrictions on starting activities from the background&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://stackoverflow.com/users/1676363/ianhanniballake&#34;&gt;Ian Lake&lt;/a&gt; from the Android Toolkit team at &lt;a href=&#34;https://stackoverflow.com/questions/57964961/how-to-set-an-alarm-on-android-q&#34;&gt;Stackoverflow&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Full screen intent has been the recommended best practice for alarms since it was introduced in API 9 and was even more important with the introduction of heads up notifications (where your alarm shows as a heads up notification if the user is actively using their device)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;when-should-full-screen-intents-be-used&#34;&gt;When should Full-Screen Intents be used?&lt;/h3&gt;
&lt;p&gt;Full-screen intents were added to the framework since forever and it is the recommended way of launching an activity while the system is locked or busy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Incoming call&lt;/strong&gt;: When there is an incoming call, the system launches a full-screen activity if the phone is locked or shows a normal notification with high priority.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alarm Clock&lt;/strong&gt;: An alarm clock can use full-screen intent to either show an activity or a notification with high priority.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notifications with a Full-Screen Intent are less intrusive to the user and there is less chance to break in the future with any API changes.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;show-me-the-code&#34;&gt;Show me the code&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On Android 10 and above to use a full-screen intent, a special &lt;a href=&#34;https://developer.android.com/about/versions/10/behavior-changes-10#full-screen-intents&#34;&gt;permission&lt;/a&gt; needs to be declared in the Manifest.&lt;/p&gt;
&lt;p&gt;We are going to explore three different scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Notify while the app is on the foreground&lt;/li&gt;
&lt;li&gt;Schedule Full-Screen Intent Notification&lt;/li&gt;
&lt;li&gt;Full-Screen Intent on Lock Screen with a Keyguard&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: Some logic will be emitted for demonstration purposes&lt;/p&gt;
&lt;h3 id=&#34;1-notify-while-the-app-on-the-foreground&#34;&gt;1. Notify while the app on the foreground.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/full_screen_intent-notify-while-foreground.gif&#34; alt=&#34;Notify while the app on the foreground demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to show a full-screen intent, we need to first build the notification and &lt;strong&gt;set the full-screen intent to the notification&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To build the intent we need a pending intent, which can be achieved using &lt;a href=&#34;https://developer.android.com/reference/android/app/PendingIntent&#34;&gt;PendingIntent&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; builder = NotificationCompat.Builder(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, channelId)
        .setSmallIcon(android.R.drawable.arrow_up_float)
        .setContentTitle(title)
        .setContentText(description)
        .setPriority(NotificationCompat.PRIORITY_HIGH)
&lt;span style=&#34;color:#75715e&#34;&gt;// request code and flags not added for demo purposes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; pendingIntent = PendingIntent.getActivity(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, intent, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
builder.setFullScreenIntent(pendingIntent) &lt;span style=&#34;color:#75715e&#34;&gt;// THIS HERE is the full-screen intent
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-schedule-full-screen-intent-notification&#34;&gt;2. Schedule Full-Screen Intent Notification&lt;/h3&gt;
&lt;p&gt;Building the notification is identical to the previous example. The main difference is that the notification is not built by an Activity but by a &lt;a href=&#34;https://developer.android.com/reference/android/content/BroadcastReceiver&#34;&gt;BroadcastReceiver&lt;/a&gt; to enable scheduling in the future using &lt;a href=&#34;https://developer.android.com/reference/android/app/AlarmManager&#34;&gt;AlarmManager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/full_screen_intent-schedule.gif&#34; alt=&#34;Schedule Full-Screen Intent Notification demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scheduling&lt;/strong&gt;
AlarmManager needs a PendingIntent with a BroadcastReceiver.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;.scheduleNotification(isLockScreen: Boolean) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; alarmManager = getSystemService(Context.ALARM_SERVICE) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; AlarmManager
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; timeInMillis = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(SCHEDULE_TIME)
    with(alarmManager) {
        setExact(AlarmManager.RTC_WAKEUP, timeInMillis, getReceiver(isLockScreen))
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;.getReceiver(isLockScreen: Boolean): PendingIntent {
    &lt;span style=&#34;color:#75715e&#34;&gt;// for demo purposes no request code and no flags
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; PendingIntent.getBroadcast(
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
        NotificationReceiver.build(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, isLockScreen),
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    )
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Receiver&lt;/strong&gt;
The Receiver below is called in two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the system is locked&lt;/li&gt;
&lt;li&gt;When the system is not locked&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotificationReceiver&lt;/span&gt; : BroadcastReceiver() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onReceive&lt;/span&gt;(context: Context, intent: Intent) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(intent.getBooleanExtra(LOCK_SCREEN_KEY, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)) {
            context.showNotificationWithFullScreenIntent(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            context.showNotificationWithFullScreenIntent()
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(context: Context, isLockScreen: Boolean): Intent {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Intent(context, NotificationReceiver&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;.java).also {
                it.putExtra(LOCK_SCREEN_KEY, isLockScreen)
            }
        }
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; LOCK_SCREEN_KEY = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lockScreenKey&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-full-screen-intent-on-lock-screen-with-a-keyguard&#34;&gt;3. Full-Screen Intent on Lock Screen with a Keyguard&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/app/KeyguardManager&#34;&gt;Keyguard&lt;/a&gt; could prevent the notification from being displayed.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see an example to visualize it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/full_screen_intent-keyguard-blocker.gif&#34; alt=&#34;Full-Screen Intent on Lock Screen with a Keyguard demo blocker&#34;&gt;&lt;/p&gt;
&lt;p&gt;The framework provides some flags to dismiss keyguard.&lt;/p&gt;
&lt;p&gt;Activity#&lt;a href=&#34;https://developer.android.com/reference/android/app/Activity#setShowWhenLocked(boolean)&#34;&gt;setShowWhenLocked&lt;/a&gt;(true) method
Note: To be able to turn on the screen we need to also request it using the:&lt;/p&gt;
&lt;p&gt;‚Äì Activity#&lt;a href=&#34;https://developer.android.com/reference/android/app/Activity#setTurnScreenOn(boolean)&#34;&gt;setTurnScreenOn&lt;/a&gt;(true) method&lt;/p&gt;
&lt;p&gt;Time for an extension function that sets both flags with backward compatibility üöÄ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Activity&lt;/span&gt;.turnScreenOnAndKeyguardOff() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O_MR1) {
        setShowWhenLocked(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
        setTurnScreenOn(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        window.addFlags(
            WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
                    or WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON
        )
    }
    with(getSystemService(Context.KEYGUARD_SERVICE) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; KeyguardManager) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O) {
            requestDismissKeyguard(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;@turnScreenOnAndKeyguardOff, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Demo üé¨
&lt;img src=&#34;https://www.giorgosneokleous.com/posts/full_screen_intent-keyguard-fixed.gif&#34; alt=&#34;Full-Screen Intent on Lock Screen with a Keyguard&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Using Full-Screen Intents is easy and it‚Äôs the recommended way of launching an activity, especially for alarms.&lt;/p&gt;
&lt;p&gt;The API should be used with care, and developers shouldn‚Äôt abuse it as it‚Äôs quite intrusive especially when the screen wakes up.&lt;/p&gt;
&lt;p&gt;You can find a sample project &lt;a href=&#34;https://github.com/giorgosneokleous93/fullscreenintentexample/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to ping me on &lt;a href=&#34;https://twitter.com/neokleoys2005&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till next time! üëã&lt;/p&gt;
&lt;h4 id=&#34;recommended-reading&#34;&gt;Recommended Reading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/components/activities/background-starts#display-notification&#34;&gt;https://developer.android.com/guide/components/activities/background-starts#display-notification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/notify-user/time-sensitive&#34;&gt;https://developer.android.com/training/notify-user/time-sensitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/about/versions/10/behavior-changes-10#full-screen-intents&#34;&gt;https://developer.android.com/about/versions/10/behavior-changes-10#full-screen-intents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Documenting your XML attributes ‚Äì Custom View</title>
      <link>https://www.giorgosneokleous.com/post/documenting-your-xml-attributes-custom-view/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.giorgosneokleous.com/post/documenting-your-xml-attributes-custom-view/</guid>
      <description>&lt;p&gt;Today, I will walk you through on how to create a very basic Custom View, and we will do something that many libraries and developers often forget to do:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Documenting XML Attributes, which offer customizations on custom views.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why&lt;/h3&gt;
&lt;p&gt;Documentation sometimes is redundant if the method, class or property is self-describing. However, imagine any Android API without it. Android development will instantly turn into living hell. To figure out what‚Äôs going on we will have to step into source code and trial-and-error different options.&lt;/p&gt;
&lt;h3 id=&#34;custom-view&#34;&gt;Custom View&lt;/h3&gt;
&lt;p&gt;I will be using the following custom view, which draws a Circle. The customizations available will be: fill color and radius.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/documenting-your-xml-attributes-circle-custom-view.png&#34; alt=&#34;Custom View Demonstration&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;h4 id=&#34;create-custom-attributes&#34;&gt;Create custom attributes&lt;/h4&gt;
&lt;p&gt;Creating custom attributes allows specifying properties on the XML directly instead of programmatically. These attributes will be fetched at the construction of the View.&lt;/p&gt;
&lt;p&gt;To declare the attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Values resource file ‚Äì usually called attrs.xml&lt;/li&gt;
&lt;li&gt;Open a declare-styleable tag&lt;/li&gt;
&lt;li&gt;Include the attributes within the view&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;declare-styleable&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CircleCustomView&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fillColor&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;radius&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dimension&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;em&gt;‚Äúname‚Äù&lt;/em&gt; should be your custom view‚Äôs class name to bind the enclosed attributes to it. In our case that would be &lt;em&gt;‚ÄúCircleCustomView‚Äú&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now the enclosed attributes would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fill Color of the format ‚Äúcolor‚Äù resource&lt;/li&gt;
&lt;li&gt;The radius of the format dimension&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;fetch-custom-attributes&#34;&gt;Fetch custom attributes&lt;/h4&gt;
&lt;p&gt;In the initialization of our custom view, we need to fetch and store those attributes in order to use them when drawing on the &lt;a href=&#34;https://developer.android.com/reference/android/graphics/Canvas&#34;&gt;Canvas&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;init {
    context.theme.obtainStyledAttributes(
        attrs,
        R.styleable.CircleCustomView,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    ).apply {
        circleFillColor = getColor(
            R.styleable.CircleCustomView_fillColor,
            context.getColor(R.color.colorAccent)
        )
        circleRadius = getDimension(R.styleable.CircleCustomView_radius, &lt;span style=&#34;color:#ae81ff&#34;&gt;100f&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;draw-the-circle&#34;&gt;Draw the circle&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onDraw&lt;/span&gt;(canvas: Canvas?) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onDraw(canvas)
    paint.color = circleFillColor
    canvas&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;drawCircle(canvas.width / &lt;span style=&#34;color:#ae81ff&#34;&gt;2f&lt;/span&gt;, canvas.height / &lt;span style=&#34;color:#ae81ff&#34;&gt;2F&lt;/span&gt;, circleRadius, paint)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;full-class&#34;&gt;Full Class&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CircleCustomView&lt;/span&gt; @JvmOverloads &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(
    context: Context,
    attrs: AttributeSet? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
    defStyleAttr: Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
) : View(context, attrs, defStyleAttr) {
    @ColorInt
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; circleFillColor: Int
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; circleRadius: Float
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; paint = Paint()
    init {
        context.theme.obtainStyledAttributes(
            attrs,
            R.styleable.CircleCustomView,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ).apply {
            circleFillColor = getColor(
                R.styleable.CircleCustomView_fillColor,
                context.getColor(R.color.colorAccent)
            )
            circleRadius = getDimension(R.styleable.CircleCustomView_radius, &lt;span style=&#34;color:#ae81ff&#34;&gt;100f&lt;/span&gt;)
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onDraw&lt;/span&gt;(canvas: Canvas?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onDraw(canvas)
        paint.color = circleFillColor
        canvas&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;drawCircle(canvas.width / &lt;span style=&#34;color:#ae81ff&#34;&gt;2f&lt;/span&gt;, canvas.height / &lt;span style=&#34;color:#ae81ff&#34;&gt;2F&lt;/span&gt;, circleRadius, paint)
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setFillColor&lt;/span&gt;(@ColorRes colorRes: Int) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.circleFillColor = context.getColor(colorRes)
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setRadius&lt;/span&gt;(@DimenRes radius: Int) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.circleRadius = context.resources.getDimension(radius)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;document-xml-attributes&#34;&gt;Document XML Attributes&lt;/h3&gt;
&lt;p&gt;Without documentation, if I try to check for it over the &lt;em&gt;fillColor&lt;/em&gt;, I am getting the following.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/documenting-your-xml-attributes-circle-fillColor-doc-popup.png&#34; alt=&#34;Fill Color IDE Popup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Using normal XML comments above the attributes will result in attaching the comments as documentation for them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;declare-styleable&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CircleCustomView&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Sets the fill color of the circle --&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fillColor&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Sets the radius of the circle --&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;radius&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dimension&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if I ask for documentation on the attribute, I am getting proper documentation as seen below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/documenting-your-xml-attributes-circle-fillColor-doc-popup-with-docs-1.png&#34; alt=&#34;Demonstration of Docs Popup 1&#34;&gt;
&lt;img src=&#34;https://www.giorgosneokleous.com/posts/documenting-your-xml-attributes-circle-fillColor-doc-popup-with-docs-2.png&#34; alt=&#34;Demonstration of Docs Popup 2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Documenting XML attributes for your custom views is as simple as attaching an XML comment using the &lt;code&gt;&amp;lt;!-- comment --&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In my opinion, documentation is not always needed. If something is self-describing then you can afford to skip it. On the other hand, if something will be used by many others or does something that is not specified or described from the class, property or method name then it needs documentation.&lt;/p&gt;
&lt;p&gt;Feel free to ping me on &lt;a href=&#34;https://twitter.com/neokleoys2005&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till next time! üëã&lt;/p&gt;
&lt;p&gt;Get started with custom views with the following links:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/custom-views/create-view&#34;&gt;https://developer.android.com/training/custom-views/create-view&lt;/a&gt;
&lt;a href=&#34;https://developer.android.com/training/custom-views/custom-drawing&#34;&gt;https://developer.android.com/training/custom-views/custom-drawing&lt;/a&gt;
&lt;a href=&#34;https://developer.android.com/guide/topics/ui/custom-components&#34;&gt;https://developer.android.com/guide/topics/ui/custom-components&lt;/a&gt;
Codelab &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/advanced-android-training-customize-view/index.html?index=..%2F..advanced-android-training#0&#34;&gt;Part A&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/advanced-android-training-custom-view-from-scratch/index.html?index=..%2F..advanced-android-training#0&#34;&gt;Part B&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Name your .apk &amp; .aab files</title>
      <link>https://www.giorgosneokleous.com/post/name-your-apk-aab-files/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.giorgosneokleous.com/post/name-your-apk-aab-files/</guid>
      <description>&lt;p&gt;This post will explore how to rename your artifacts, to convey meaning.&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use cases:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When your application has multiple ‚Äúflavours‚Äù, you need the outputs identifiable.&lt;/li&gt;
&lt;li&gt;When you produce multiple versions at the same time, you need to tell which artifact is which.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To check your current artifact‚Äôs name simply run assembleDebug Gradle task. If you haven‚Äôt modified it yet, your output will be &lt;strong&gt;app-debug.apk&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What would be better to have is something that is identifiable and meaningful like the template below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${applicationId}-v${versionName}(${versionCode})-${buildType}.apk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This template will produce something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;com.example.sampleproject-v1.0.0(101)-release.apk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By using this template you know what the APK is about.&lt;/p&gt;
&lt;h3 id=&#34;option-1&#34;&gt;Option 1&lt;/h3&gt;
&lt;p&gt;I personally do not recommend the following solution but you can find it in many StackOverflow answers.&lt;/p&gt;
&lt;p&gt;When I tried it with app bundles, it was not working.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;applicationVariants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; variant &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    variant&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;outputs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        outputFileName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${applicationId}-v${versionName}(${versionCode})-${buildType}.apk&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The DSL Version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;applicationVariants.all {
    outputs.forEach { output -&amp;gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (output &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; com.android.build.gradle.&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt;.api.BaseVariantOutputImpl) {
            output.outputFileName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${applicationId}-v${versionName}(${this.versionCode})-${name}.${output.outputFile.extension}&amp;#34;&lt;/span&gt;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above works fine for APKs but not for app bundles.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;com.example.sampleproject-v1.0.0(101)_release.apk
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;option-2&#34;&gt;Option 2&lt;/h3&gt;
&lt;p&gt;The following implementation is easy and simple but as the property ‚ÄúarchivesBaseName‚Äù implies, it will only set up the base name and not the full file‚Äôs name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;android &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  defaultConfig &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    archivesBaseName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${applicationId}-v${versionName}(${versionCode})&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;THE DSL Version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;android {
  ...
  defaultConfig {
    ...
    setProperty(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;archivesBaseName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${applicationId}-v${versionName}(${versionCode})&amp;#34;&lt;/span&gt;)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;com.example.sampleproject-v1.0.0(101)-release.apk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The ‚Äú-release‚Äù part is added according to the build type automatically.&lt;/p&gt;
&lt;h3 id=&#34;performance-comparison&#34;&gt;Performance Comparison&lt;/h3&gt;
&lt;p&gt;In this section, Option 1 will be compared against Option 2.&lt;/p&gt;
&lt;p&gt;The following metrics were taken on a 7-module project by running the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clean&lt;/li&gt;
&lt;li&gt;assembleDebug&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Runs&lt;/th&gt;
&lt;th&gt;Option 1&lt;/th&gt;
&lt;th&gt;Option 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;15.643&lt;/td&gt;
&lt;td&gt;16.519&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16.539&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;14.39&lt;/td&gt;
&lt;td&gt;16.592&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16.536&lt;/td&gt;
&lt;td&gt;14.506&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;16.9&lt;/td&gt;
&lt;td&gt;15.391&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;16.0016&lt;/td&gt;
&lt;td&gt;15.5046&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&#34;https://www.giorgosneokleous.com/posts/name-your-apk-aab-files-Property-vs-Variant-Manipulation.png&#34; alt=&#34;Comparison of the two options&#34;&gt;
As you can see from the graphs and metrics above, the two options have identical performance, with no clear winner. To be honest, I was expecting &lt;strong&gt;Option 2&lt;/strong&gt; to be faster ü§∑.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Personally I prefer Option 2, it‚Äôs simple and it did not break when App Bundles were introduced.&lt;/p&gt;
&lt;p&gt;Remember: When naming your artifacts make sure that you are giving them meaningful names.&lt;/p&gt;
&lt;p&gt;If you have anything to add or want to share your experiences with me feel free to ping me on &lt;a href=&#34;https://twitter.com/neokleoys2005&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you enjoyed this blog post, feel free to share it around or hit the üëèbelow!&lt;/p&gt;
&lt;p&gt;Till next time! üëã&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mock Responses with OkHttp &amp; Retrofit</title>
      <link>https://www.giorgosneokleous.com/post/mock-responses-with-okhttp-retrofit/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.giorgosneokleous.com/post/mock-responses-with-okhttp-retrofit/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This blog post does not explore Retrofit nor OkHttp and all their glory. Instead, we are looking into OkHttp&amp;rsquo;s testing API and how to use that to provide confidence into our codebase.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Testing is often daunting but crucial for software development. I am going to keep this post short and sweet. We will explore together the &lt;a href=&#34;https://square.github.io/okhttp/&#34;&gt;OkHttp‚Äòs&lt;/a&gt; ‚ÄúMockWebServer‚Äù and how to integrate with Retrofit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; Retrofit Users&lt;/p&gt;
&lt;h3 id=&#34;the-why&#34;&gt;The Why?&lt;/h3&gt;
&lt;p&gt;We need our tests non-flaky, and reliable! What that means is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Our tests should run in isolation&lt;/li&gt;
&lt;li&gt;Our tests should not be affected by external factors&lt;/li&gt;
&lt;li&gt;Our tests conditions are controllable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A nice explanation of a flaky test from the &amp;ldquo;&lt;a href=&#34;https://hackernoon.com/flaky-tests-a-war-that-never-ends-9aa32fdef359&#34;&gt;Flaky Tests - A War that Never Ends&lt;/a&gt;&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A flaky test is a test which could fail or pass for the same configuration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All the above points are needed so that we can control and test different scenarios. For example, if the tests are making a real network call, then they could fail when the network connectivity is lost.&lt;/p&gt;
&lt;h3 id=&#34;setup-&#34;&gt;Setup üî®&lt;/h3&gt;
&lt;p&gt;You need to add the following dependency in &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;testImplementation&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.squareup.okhttp3:mockwebserver:see.latest.version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Explore more about MockWebServer dependency at the &lt;a href=&#34;https://github.com/square/okhttp/tree/master/mockwebserver&#34;&gt;Github Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;explore-&#34;&gt;Explore üõ´&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;MockWebServer&lt;/em&gt; is really powerful and provides us with some incredible APIs to ease the pain when testing such features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some of the highlights are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mocking Responses&lt;/li&gt;
&lt;li&gt;Throttling for bodies&lt;/li&gt;
&lt;li&gt;Throttling for headers&lt;/li&gt;
&lt;li&gt;Many many more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the Readme of &lt;a href=&#34;https://github.com/square/okhttp/tree/master/mockwebserver&#34;&gt;MockWebServer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This library makes it easy to test that your app Does The Right Thing when it makes HTTP and HTTPS calls. It lets you specify which responses to return and then verify that requests were made as expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;create-the-mock-web-server-&#34;&gt;Create the mock web server üèó&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mockWebServer = MockWebServer()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you are ready to start your tests, make sure you ‚ÄúStart‚Äù the mock server like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;mockWebServer.start()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;mocking-a-response&#34;&gt;Mocking a response&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;MockResponse()
   .setResponseCode(HttpURLConnection.HTTP_OK)
   .setBody(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;{&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status\&amp;#34;:\&amp;#34;error\&amp;#34;,\&amp;#34;code\&amp;#34;:\&amp;#34;responseCode\&amp;#34;}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)     
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To instruct the server to return the mocked response, you need to &lt;a href=&#34;https://square.github.io/okhttp/4.x/mockwebserver/okhttp3.mockwebserver/-mock-web-server/enqueue/&#34;&gt;enqueue&lt;/a&gt; the mock response such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;mockWebServer.enqueue(mockResponse)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For further studying, head to MockWebServer‚Äôs Javadoc &lt;a href=&#34;https://square.github.io/okhttp/4.x/mockwebserver/okhttp3.mockwebserver/-mock-web-server/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;basic-setup-for-unit-tests&#34;&gt;Basic Setup for unit tests&lt;/h3&gt;
&lt;p&gt;The following setup will make sure that you start your mock server and shut it down between tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourTest&lt;/span&gt; {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; mockWebServer: MockWebServer

    @Before
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;() {
        mockWebServer = MockWebServer()
        mockWebServer.start()
    }

    @After
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tearDown&lt;/span&gt;() {
        mockWebServer.shutdown()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mockwebserver-with-retrofit&#34;&gt;MockWebServer with Retrofit&lt;/h3&gt;
&lt;p&gt;Now, let‚Äôs explore, how to use Retrofit with all the above.&lt;/p&gt;
&lt;p&gt;Basic setup for Retrofit looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;Retrofit retrofit = new Retrofit.Builder()
    .baseUrl(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ourapi.com/&amp;#34;&lt;/span&gt;)
    .build()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are used to passing a String to the method &lt;code&gt;.baseUrl(string)&lt;/code&gt;. However, there is an overload which takes an &lt;a href=&#34;https://square.github.io/okhttp/4.x/okhttp/okhttp3/-http-url/&#34;&gt;HttpUrl&lt;/a&gt; object. The HttpUrl object is what the mock web server exposes and we could use to integrate it into tests.&lt;/p&gt;
&lt;p&gt;If we actually check the &lt;a href=&#34;https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit2/Retrofit.java#L490&#34;&gt;source code&lt;/a&gt; the &lt;code&gt;.baseUrl(string)&lt;/code&gt; internally looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Builder &lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String baseUrl&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    checkNotNull&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;baseUrl&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;baseUrl == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; baseUrl&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpUrl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;baseUrl&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we then pass for the base URL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Production&lt;/strong&gt;: &lt;code&gt;HttpUrl.get(&amp;quot;https://ourapi.com/&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt;: &lt;code&gt;mockWebServer.url(&amp;quot;/&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-transformation&#34;&gt;The Transformation&lt;/h4&gt;
&lt;p&gt;First, pass the above to your Retrofit builder and then start receiving the mock responses and leveraging the test environment for your benefit.&lt;/p&gt;
&lt;p&gt;As you can see from the examples below, we should now inject the HttpUrl to allow the MockWebServer to do its magic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OurApi&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; baseUrl: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ourapi.com/&amp;#34;&lt;/span&gt;
) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; retrofit = Retrofit.Builder()
        .baseUrl(baseUrl)
        .addConverterFactory(MoshiConverterFactory.create())
        .build()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OurApi&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; baseUrl: HttpUrl = HttpUrl.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ourapi.com/&amp;#34;&lt;/span&gt;)
) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; retrofit = Retrofit.Builder()
        .baseUrl(baseUrl)
        .addConverterFactory(MoshiConverterFactory.create())
        .build()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That‚Äôs it really, thanks for reading the post!&lt;/p&gt;
&lt;p&gt;Happy coding and testing!&lt;/p&gt;
&lt;p&gt;Feel free to ping me on &lt;a href=&#34;https://twitter.com/neokleoys2005&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till next time! üëã&lt;/p&gt;
&lt;p&gt;(üëá check out the bonus section below üëá)&lt;/p&gt;
&lt;h3 id=&#34;bonus&#34;&gt;Bonus&lt;/h3&gt;
&lt;p&gt;You can place different responses in your Test Resources which you can instruct the MockWebServer instance to return.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a folder under the following path:&lt;code&gt;~/${MODULE}/src/test/resources&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Place there the responses as JSON files such as: &lt;code&gt;error.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;From your unit test read the file as a String and pass to the mock web server instance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Read json files as Strings&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileUtils&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readTestResourceFile&lt;/span&gt;(fileName: String): String {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fileInputStream = javaClass.classLoader&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;getResourceAsStream(fileName)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fileInputStream&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;bufferedReader()&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;readText() &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// pass to mock web server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; response = MockResponse()
response.setResponseCode(HttpURLConnection.HTTP_OK)
response.setBody(FileUtils.readTestResourceFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error.json&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Sweet Truth, the Truth fairy ü¶∑</title>
      <link>https://www.giorgosneokleous.com/post/sweet-truth-the-truth-fairy/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.giorgosneokleous.com/post/sweet-truth-the-truth-fairy/</guid>
      <description>&lt;p&gt;Writing tests is an important part of software development and dare to say not an easy task. There are many practices, libraries, books, podcasts, web courses dedicated to testing. Without testing we can ship a software with ‚Äú1 to N‚Äù number of bugs.&lt;/p&gt;
&lt;p&gt;Personally, I am a fan of the following technique which helps developers write tests and provides a template guide on how-to form your tests.&lt;/p&gt;
&lt;h3 id=&#34;arrange-act-assert-aaa&#34;&gt;Arrange Act Assert (AAA)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;a pattern for arranging and formatting code in [UnitTest](a pattern for arranging and formatting code in UnitTest methods
) methods&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It states that each unit test needs the following three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange: prepare the inputs, preconditions, mocks, etc.&lt;/li&gt;
&lt;li&gt;Act: Perform operation on the function or object which is under test.&lt;/li&gt;
&lt;li&gt;Assert: Make sure that the output matches the expected output.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@Test
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;`example of AAA`&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; input = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; output = toThePowerOfTwo(number = input)
    &lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Assert.assertEquals(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, output)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On this blog post we are going to focused on the &lt;strong&gt;Assertions&lt;/strong&gt; part.&lt;/p&gt;
&lt;h2 id=&#34;junit-assertions&#34;&gt;JUnit Assertions&lt;/h2&gt;
&lt;p&gt;JUnit comes with a set of pretty basic assertions which can be used during testing.&lt;/p&gt;
&lt;p&gt;The whole set can be found at their &lt;a href=&#34;https://junit.org/junit4/javadoc/latest/org/junit/Assert.html&#34;&gt;JavaDoc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;JUnit also comes with the &lt;a href=&#34;http://hamcrest.org/JavaHamcrest/index&#34;&gt;Hamcrest&lt;/a&gt; assertions which are very nice!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hamcrest Example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@Test
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;`example of Hamcrest`&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; input = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; output = toThePowerOfTwo(input)

    Assert.assertThat(output, CoreMatchers.`is`(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my opinion matchers are a much readable form of unit tests as it can be easily expressed, also the unit tests failures are much more readable.&lt;/p&gt;
&lt;p&gt;Let‚Äôs go one step beyond now and introduce the main star of the post, &lt;a href=&#34;https://truth.dev/&#34;&gt;Truth&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;truth&#34;&gt;Truth&lt;/h2&gt;
&lt;p&gt;Truth is an assertion library, that comes with assertions and nice failure messages and as a result of that much more readable unit tests ‚ô•Ô∏è.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Truth is owned and maintained by the &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt; team. It is used in the majority of the tests in Google‚Äôs own codebase.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Truth‚Äôs API enables chained method calls, this is a huge win for me as it‚Äôs easier to read.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@Test
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;`example one of Truth`&lt;/span&gt;() {
    Truth.assertThat(getUsers()).containsEntry(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User 1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example can be easily read as: ‚ÄúAssert that getAllUsers() returns a map with an entry with key: User 1 and value John Doe. Truth can also be imported statically so you can no always add Truth.*.&lt;/p&gt;
&lt;p&gt;A failure message of the above would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value of: map.get(User 2)
expected: John Doe
but was : John Wick
map was : {User 1=John Doe, User 2=John Wick, User 3=Steve Rogers}
Expected :John Doe
Actual   :John Wick
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Much much easier to understand what went wrong! üëèüéâ&lt;/p&gt;
&lt;p&gt;Full JavaDoc for Truth can be found at: &lt;a href=&#34;https://truth.dev/api/1.0/&#34;&gt;https://truth.dev/api/1.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;
Check that a list contains the items you expect and in the correct order.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;Test
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;`example two of Truth`&lt;/span&gt;() {
    Truth.assertThat(getAllUsernames())
        .containsExactly(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User 1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User 2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User 3&amp;#34;&lt;/span&gt;)
        .inOrder()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A failure message of the above would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;contents match, but order was wrong
expected: [User 2, User 1, User 3]
but was : [User 1, User 2, User 3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;
Assertions on String objects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@Test
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;`example three of Truth`&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; user = getRandomUser()

    Truth.assertThat(user.name).contains(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;)
    Truth.assertThat(user.username).startsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User&amp;#34;&lt;/span&gt;)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A failure message of the above would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expected to contain: Steve
but was            : John Doe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 4&lt;/strong&gt;
With Kotlin‚Äôs extension functions we can power up Truth üÜôüí™&lt;/p&gt;
&lt;p&gt;With the following extension we can chain multiple assertions, Truth allows one at time, except if the method allows it, like &lt;em&gt;Example 2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The only downside is that failures will be invoked on the first call and not the subsequent ones.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Invoke multiple calls on [T] objects.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T : Subject&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;.toTruthSerum(&lt;span style=&#34;color:#66d9ef&#34;&gt;vararg&lt;/span&gt; calls: T.() -&amp;gt; Unit) {
    calls.forEach { it.invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;@toTruthSerum) }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// how to use
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;@Test
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt; four of Truth - with kotlin extensions&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; user = getJohnWick()

    Truth.assertThat(user.name).toTruthSerum(
        { startsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;) },
        { endsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wick&amp;#34;&lt;/span&gt;) }
    )
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A failure message of the above would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expected to start with: Wick
but was               : John Wick
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really like Truth! It can make testing really really fun ü•≥ and easier to debug. Refactoring tests or failing tests can be an easy-peasy task now!&lt;/p&gt;
&lt;p&gt;I wish it had better support for Kotlin to enable some of the language features, e.g. named parameters which will make our tests even more readable. At example #1, it would nice to have instead of:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#containsEntry(&amp;quot;User 1&amp;quot;, &amp;quot;John Doe&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to have:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#containsEntry(key = &amp;quot;User 1&amp;quot;, value = &amp;quot;John Doe&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To finish off, do and use whatever suits you. Especially for testing, adding new dependencies doesn‚Äôt increase app size, nor method count for your shipped product. On the contrary it will help you write better (hopefully ü§û) tests (and don‚Äôt overdo it with the dependencies just because you can).&lt;/p&gt;
&lt;p&gt;Feel free to ping me on &lt;a href=&#34;https://twitter.com/neokleoys2005&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till next time! üëã&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>